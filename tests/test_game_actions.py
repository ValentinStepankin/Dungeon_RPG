from game.game_actions import get_actions, handle_action
from game.utils import create_enemy


def test_get_actions(enemy_data):
    # Проверка вариантов доступных действий в зависимости от типа комнаты
    dungeon = ['St', ' ', 'E', 'Ex']

    enemies = {
        2: create_enemy(enemy_data)
    }

    # Тестирование комнаты "Стартовая" (St)
    actions = get_actions(0, dungeon, enemies)
    assert "Пойти дальше" in actions, "В стартовой комнате должно быть доступно действие 'Пойти дальше'"
    assert "Вернуться назад" not in actions, "В стартовой комнате действие 'Вернуться назад' недоступно"
    assert "Атаковать" not in actions, "В стартовой комнате врагов нет, действие 'Атаковать' недоступно"
    assert "Выйти из подземелья" not in actions, "В стартовой комнате действие 'Выйти из подземелья' недоступно"

    # Тестирование пустой комнаты ( )
    actions = get_actions(1, dungeon, enemies)
    assert "Пойти дальше" in actions, "В пустой комнате должно быть доступно действие 'Пойти дальше'"
    assert "Вернуться назад" in actions, "В пустой комнате должно быть доступно действие 'Вернуться назад'"
    assert "Атаковать" not in actions, "В пустой комнате врагов нет, действие 'Атаковать' недоступно"
    assert "Выйти из подземелья" not in actions, "В пустой комнате действие 'Выйти из подземелья' недоступно"

    # Тестирование комнаты с врагом (E)
    actions = get_actions(2, dungeon, enemies)
    assert "Атаковать" in actions, "В комнате с врагом должно быть доступно действие 'Атаковать'"
    assert "Пойти дальше" not in actions, "В комнате с врагом нельзя двигаться вперед, пока враг не побежден"
    assert "Вернуться назад" in actions, "В комнате с врагом должно быть доступно действие 'Вернуться назад'"
    assert "Выйти из подземелья" not in actions, "В комнате с врагом действие 'Выйти из подземелья' недоступно"

    # Тестирование комнаты выхода (Ex)
    actions = get_actions(3, dungeon, enemies)
    assert "Выйти из подземелья" in actions, "В комнате выхода должно быть доступно действие 'Выйти из подземелья'"
    assert "Вернуться назад" in actions, "В комнате выхода должно быть доступно действие 'Вернуться назад'"
    assert "Пойти дальше" not in actions, "В комнате выхода действие 'Пойти дальше' недоступно"
    assert "Атаковать" not in actions, "В комнате выхода врагов нет, действие 'Атаковать' недоступно"


def test_handle_action():
    # Проверка изменения комнаты в зависимости от действия
    assert handle_action("Вернуться назад", 1) == 0, "При действии 'Вернуться назад' индекс комнаты должен уменьшаться"
    assert handle_action("Пойти дальше", 0) == 1, "При действии 'Пойти дальше' индекс комнаты должен увеличиваться"
    assert handle_action("Выйти из подземелья", 2) == -1, "При действии 'Выйти из подземелья' должно возвращаться -1"
    assert handle_action("", 2) == 2, "Пустое действие не должно изменять комнату"
